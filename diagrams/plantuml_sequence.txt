@startuml

actor User
User -> Main : run console app

Main -> Regex2NFA: init(regex)
activate Regex2NFA

    Regex2NFA -> Regex2NFA: buildNFA()
    activate Regex2NFA

    loop ch in self.regex
        alt ch in alphabet
            Regex2NFA -> Regex2NFA: basicstruct()
            activate Regex2NFA 
                Regex2NFA -> FA : init()
                activate FA
                    FA --> Regex2NFA : basic
                    
                deactivate FA
            deactivate Regex2NFA     

        else ch == line
            Regex2NFA -> Regex2NFA: linestruct()
            activate Regex2NFA 

                Regex2NFA -> FA : init()
                activate FA
                    FA --> Regex2NFA : lineFA
                deactivate FA


            deactivate Regex2NFA 
        
        else ch == dot
            Regex2NFA -> Regex2NFA: dotstruct()
            activate Regex2NFA

                Regex2NFA -> FA: init()
                activate FA
                    FA --> Regex2NFA: dotFA
                deactivate FA

            deactivate Regex2NFA

        else ch == star 
            Regex2NFA -> Regex2NFA : starstruct()
            activate Regex2NFA

                Regex2NFA -> FA : init()
                activate FA
                    FA --> Regex2NFA : starFA
                deactivate FA
            deactivate Regex2NFA 
        end
    end
    Regex2NFA --> Regex2NFA : self.**nfa**

deactivate Regex2NFA
deactivate Regex2NFA

    
Main -> Regex2NFA : displayNFA()
activate Regex2NFA

    Regex2NFA -> FA : display()
    'activate Regex2NFA
        activate FA
            FA -> Digraph : init()
            activate Digraph
                Digraph --> User : nfa.gv.png
            deactivate Digraph
    'deactivate Regex2NFA
        deactivate FA
deactivate Regex2NFA
deactivate Regex2NFA


Main -> NFA2DFA : init()
activate NFA2DFA
    NFA2DFA -> NFA2DFA : buildDFA()
    activate NFA2DFA
        NFA2DFA -> FA : **nfa**.getEpsilonClosure(nfa.startstate)
        activate FA
            FA --> NFA2DFA : allstates
        deactivate FA

        NFA2DFA -> FA : init()

        loop len(states)
            loop ch in dfa.symbol
                NFA2DFA -> FA : **nfa**.getMove(state, ch)
                activate FA
                    FA --> NFA2DFA : trstates
                deactivate FA
                loop s in list(trstates)
                    alt s not in eclosure
                        NFA2DFA -> FA : **nfa**.getEpsilonClosure(s)
                        activate FA
                            FA --> NFA2DFA : allstates
                        deactivate FA
                    end
                end
            end
        end


        activate FA
            NFA2DFA --> NFA2DFA : self.**dfa**
        deactivate FA
    deactivate NFA2DFA
deactivate NFA2DFA

    Main -> NFA2DFA : displayDFA()
    activate NFA2DFA
        NFA2DFA -> FA : display()
        activate FA
            FA -> Digraph : init()
            activate Digraph
                Digraph --> User : dfa.gv.png
            deactivate Digraph
        deactivate FA
    deactivate NFA2DFA
deactivate NFA2DFA

Main -> NFA2DFA : minimize()
activate NFA2DFA
    NFA2DFA --> NFA2DFA : self.**minDFA**
deactivate NFA2DFA

Main -> NFA2DFA : displayminDFA()
activate NFA2DFA
    NFA2DFA --> FA : display()
    activate FA
        FA -> Digraph : init()
            activate Digraph
                Digraph --> User : mindfa.gv.png
            deactivate Digraph
    deactivate FA
deactivate NFA2DFA
@enduml